
@{
    ViewData["Title"] = "Test01";
}

<div class="container">
    <h2>Test01</h2>

    @*20170722 JPC Nested layout*@
    <div class="row">
        <div class="col-md-6" id="xform" style="border-right-style: solid;">
            <label>Human Commander: Start with Yellow and Cyan buttons.</label>

            <!-- 20170909 JPC
                 The protocol provides for separate commanderid and robotid.
                 To provide a demo we provide test commanderids in the range 10 to 19
                 We then add on 100 for the robotId. Example pair is 10,110 (or 11,111 etc)
            -->
            <div class="row">
                <div class="col-md-11">
                    <input type="text" id="AccessKey" value="demo-access-key" />
                    <br />&nbsp;
                </div>
            </div>

            <div class="row">
                <div class="col-md-11">
                    We only need to click "Register" if "CommanderId" stays blank<br />
                    <input type="text" id="CommanderId" value="" style="width:4em" readonly />
                    -- CommanderId&nbsp;
                    <button onclick="registerRequest();">Register</button>
                    @*<input type="hidden" id="RobotId" value="0" />*@
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-11">
                    Sending:<br />
                    <input type="text" id="XData" 
                      style="width:90%;font-family:'Courier New';font-size:0.4cm;" 
                      value='{"leftmotor": 80, "rightmotor": 100}' />
                    <br />&nbsp;
                </div>
            </div>

            <div class="row">
                <div class="col-md-11">
                    <input type="button" value="Send" onclick="send();" />
                    <br /><br />
                    <input type="button" value="Yellow Command" onclick="xColor('yellow');" />
                    &nbsp;<input type="button" value="Cyan Command" onclick="xColor('cyan');" />
                    <br />
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-11">
                    Receiving:<br />
                    <textarea id="XMessage" rows="6" 
                      style="width:90%;font-family:'Courier New';font-size:0.4cm;" readonly>
                    </textarea>
                </div>
            </div>
            <hr />
            <p>&nbsp;</p>
        </div>
        
        <div id="robotMessage" class="col-md-6" style="padding:2em;display:none">
        </div>
        <div id="robotContainer" class="col-md-6">
            <label>Robot Client:</label><br />
            The display below is the robot software as a webpage in an "iframe" to provide separation from the "Commander".
            <br />
            <input type="button" value="Change to Device" onclick="noIframe(true);" /><br />
            <br /><br />
            <iframe id="robotIframe" name="robotIframe" src="~/robots/Robot01.html" style="width:25em;height:35em"></iframe>
        </div>

    </div>

</div>

@*20170319 JPC get more flexible about deployment in website sub-folders defined as apps
    by "dropping" the ~ operator into HTML in a way that JavaScript can make use of it*@
<input id="rootDirectory" type="hidden" value="@Url.Content("~/")" />

<script src="~/robots/signalr.min.js"></script>

<script type="text/javascript">
    var _message = "";

    //20180805 DOM objects 
    var _oeCommanderId;
    var _oeRobotIframe;
    var _oeRobotMessage;
    var _oeContainer;

    const connection
        = new signalR.HubConnectionBuilder().withUrl("/robothub").build();

    window.onload = function () {
        _oeCommanderId = document.getElementById("CommanderId");
        _oeRobotIframe = document.getElementById("robotIframe");
        _oeRobotMessage = document.getElementById("robotMessage");
        _oeContainer = document.getElementById("robotContainer");
        window.setTimeout(onloadDelay, 200);
    }

    function onloadDelay() {
        try {
            connection.start();
            //give that 500ms then automatically run demo commander registration
            window.setTimeout(registerRequest, 800);
        } catch (err) {
            alert("Error on first connection: " + err.message);
        }
    }

    //receive from server
    connection.on("XSignal", function (messageReceived) {
        _message = messageReceived;
        receive();
    });

    //send to server
    function send() {
        _message = "testing function send()"
        var oMessage = new Object();
        oMessage.categoryid = 1; //commander sends to robot
        oMessage.commanderid = parseInt(_oeCommanderId.value);
        oMessage.robotid = oMessage.commanderid + 100;
        oMessage.accesskey = document.getElementById("AccessKey").value;
        var oXData = new Object();
        oXData = JSON.parse(document.getElementById("XData").value);
        oMessage.xdata = oXData;
        _message = JSON.stringify(oMessage);
        //alert(_message);
        //20180805 JPC if we are in test mode, then write start time into the receiving test page
        if (_oeRobotIframe.style.display !== "none") {
            tStart = Date.now();
            _oeRobotIframe.contentWindow.timeStart(tStart);
        }
        connection.invoke("XSignal", _message);
    }

    //request server to allocate demo commanderid and setup communications
    function registerRequest() {
        var oMessage = new Object();
        oMessage.categoryid = 4;  //register a demo commander on the server
        oMessage.commanderid = 0;
        oMessage.robotid = 0;
        oMessage.accesskey = "demo-access-key";
        _message = JSON.stringify(oMessage);
        //alert(_message);
        connection.invoke("XSignal", _message);
    }

    function receive() {
        //alert(message);

        document.getElementById("XMessage").value = _message;
        //blink effect
        document.getElementById("XMessage").style.backgroundColor = "rgb(255, 200, 200)";
        window.setTimeout(unblink, 200);
        var oMessage = JSON.parse(_message);

        //Case of success with registration
        if (oMessage.categoryid == 4 && oMessage.commanderid > 0) {
            registerProcess(oMessage)
        }

        //Message contains alert
        if ("alert" in oMessage) {
            alert(oMessage.alert);
        }
    }

    function unblink() {
        document.getElementById("XMessage").style.backgroundColor = "rgb(255, 255, 255)";
    }

    function xColor(robotColor) {
        var oeData = document.getElementById("XData");
        //write the color command into the XData field
        oeData.value = '{"color":' + '"' + robotColor + '"}';
        //send new data to the server
        send();
    }

    function registerProcess(oMessage) {
        _oeCommanderId.value = oMessage.commanderid;

        //alert("Received oMessage.commanderid = " & oMessage.commanderid);

        //20170910 JPC config content in iframe from here in the parent.
        //ref: https://www.w3schools.com/jsref/prop_frame_contentdocument.asp
        //ref: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload
        _oeRobotIframe.contentDocument.getElementById("CommanderId").value
            = oMessage.commanderid;
        //note use of contentWindow to access JavaScript functions in an iframe
        _oeRobotIframe.contentWindow.register();

        _oeRobotMessage.innerHTML
            = "The Robot Simulator iframe is now switched off.<br />"
        + "You can test on a different device e.g. smartphone by visiting this same website:<br />"
            + "<b>" + window.location.protocol + "//" + window.location.host + "/</b>"
            + "<br />then click on menu item 'Robot01'.<br />"
            + "You will need to type your 'CommanderId' value into the device.<br />"
            + "Your 'CommanderId' is <b>" + oMessage.commanderid + "</b>"
            + "<br /><br />"
            + "<input type='button' value='Back to Simulation' onclick='noIframe(false);' /><br/><br />";
    }

    function noIframe(isChange) {
        //disable the test javascript robot (html page) from this user interface
        //and prompt for the use of a device
        if (isChange) {
            _oeRobotIframe.src = "#";
            _oeContainer.style.display = "none";
            _oeRobotMessage.style.display = "block";
            _oeRobotMessage.style.backgroundColor = "lightgrey";
        } else {
            window.location.replace(window.location.href);
        }
    }

</script>

