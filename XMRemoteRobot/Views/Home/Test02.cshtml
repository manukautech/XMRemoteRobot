@model XMRemoteRobot.Models.MotionDetectionGalleryModel
@{
    ViewData["Title"] = "Test02";
}
<div class="container mt-3">
    <div class="row">
        <div class="col-md-6" id="xform">
            <div id="uiLabel" style="font-weight:bold">Human Commander - mouse pointer in circle</div>
            <button type="button" id="btn-controller-change" onclick="changeInput();">Change to gamepad</button>
            <br /><br />
            <div id="mousePad" style="width:320px;height:320px; margin:auto;
            background-color:lightgreen; border-radius: 160px"></div>

            <div id="gamepad-container" style="height:320px; text-align:center; padding-top:4em; display:none">
                <img src="~/images/gamepad_1484179074_carlosmtnz.png" style="margin:auto" />
            </div>
            <br />
            We only need to click "Register" if "CommanderId" stays blank<br />
            <input type="text" id="CommanderId" value="" style="width:4em" readonly />
            -- CommanderId&nbsp;
            <button onclick="registerRequest();">Register</button>
            <p>&nbsp;</p>

            <div class="text-center">
                <h4 class="mb-3"> Robot Location</h4>
                <div id="map" style="width:350px;height:350px;margin:auto"></div>
            </div>

        </div>


        @*New parent column to display robot simulator on the right on medium to large screens*@
        <div class="col-md-6" style="padding-left:2em">
            <div id="robotRemote" style="padding-left:2em;display:none">
                <b>Remote Robot</b>
                <br />
                Remote Vision: <button onclick="_isVision = true;">On</button>
                &nbsp;<button onclick="_isVision = false;_rvid.src='../images/vidPlaceholder.jpg'">Off</button>
                <br />
                <img id="rvid" style="width:80%;" src="../images/vidPlaceholder.jpg" />
                <br /><br />
                <div id="robotSignal"></div>
            </div>
            <div id="robotContainer">
                <p><b>Robot Client</b></p>
                The display below is the robot software as a webpage in an "iframe" to provide separation from the "Commander".
                <br />
                <input type="button" value="Change to Device" onclick="noIframe(true);" /><br />
                <br /><br />
                <iframe id="robotIframe" name="robotIframe" src="~/robots/Robot02.html" style="width:25em;height:41em"></iframe>
            </div>
        </div>
    </div>

    @*Still image motion detection containers removed*@
    <p>&nbsp;</p>
    <div>Attribution: GamePad icon created by <a href="https://openclipart.org/user-detail/carlosmtnzt" title="carlosmtnz">carlosmtnz</a>. Retrieved from <a href="https://openclipart.org/detail/270512/gamepad" title="GamePad">openclipart.org</a></div>

    @*20170319 JPC get more flexible about deployment in website sub-folders defined as apps
        by "dropping" the ~ operator into HTML in a way that JavaScript can get to it*@
    <input id="rootDirectory" type="hidden" value="@Url.Content("~/")" />
</div>

@*20180728 JPC convert from Ajax long polling to SignalR*@
<script src="~/robots/signalr.min.js"></script>

@* 2019-01-16 JPC Change of naming convention for SignalR "signalObject" and "message"
    Note that we use the keywords "signal", "request" or "response" for the complete JSON
    string, depending on context, and "message" as one of the child elements,
    usually for descriptive text.
    Ref: document "Lessons from Robots about JSON_v20190116.docx" that should be packaged
    with "XMRemoteRobot"
*@

<script type="text/javascript">
    var _oeCommanderId;
    var _signal = "";

    //20180805 DOM objects
    var _oeCommanderId;
    var _oeRobotIframe;
    var _oerobotSignal;
    var _oeRobotRemote;
    var _oeContainer;
    var _sendCycle = setInterval(send, 125);

    //20180803 JPC new approach
    var _accessKey = "demo-access-key";

    const connection
        = new signalR.HubConnectionBuilder().withUrl("/robothub").build();


    //mouse event tracking
    var _wx = 0;
    var _wy = 0;
    var map, marker;
    //20180805 JPC change default UI to mouse-circle
    var _gamepadMode = false;

    //2019-03-13 JPC remote vision
    var _isVision = false;

    //var _robotMode = 'None';
    //var RobotMode = {
    //    None: "None",
    //    LiveStream: "LiveStream",
    //    MotionDetect: "MotionDetect",
    //    SpeechRecognition: "SpeechRecognition"
    //}

    window.onload = function () {
        _oeCommanderId = document.getElementById("CommanderId");
        _oeRobotIframe = document.getElementById("robotIframe");
        _oerobotSignal = document.getElementById("robotSignal");
        _oeRobotRemote = document.getElementById("robotRemote");
        _oeContainer = document.getElementById("robotContainer");
        //video from remote robot
        _rvid = document.getElementById("rvid");
        window.setTimeout(onloadDelay, 125);
    }

    function onloadDelay() {
        try {
            connection.start();
            //give that 500ms then automatically run demo commander registration
            window.setTimeout(registerRequest, 800);
        } catch (err) {
            alert("Error on first connection: " + err.message);
        }
    }

    //receive from server
    connection.on("XSignal", function (signalReceived) {
        _signal = signalReceived;
        receive();
    });

    function receive() {
        //alert(_signal);

        //document.getElementById("XSignal").value = _signal;
        ////blink effect
        //document.getElementById("XSignal").style.backgroundColor = "rgb(255, 200, 200)";
        //window.setTimeout(unblink, 200);
        var signalObject = JSON.parse(_signal);

        //Case of success with registration
        if (signalObject.categoryid == 4 && signalObject.commanderid > 0) {
            registerProcess(signalObject)
        } else if ("latitude" in signalObject.xdata) {
            moveMarker(signalObject.xdata.latitude, signalObject.xdata.longitude);
        }

        ////2019-03-13 JPC remote vision
        if ("imgbase64" in signalObject.xdata && _isVision) {
            _rvid.src = signalObject.xdata.imgbase64;
        }

        //Signal contains alert
        if ("alert" in signalObject) {
            alert(signalObject.alert);
        }
    }

    //request server to allocate demo commanderid and setup communications
    function registerRequest() {
        var signalObject = new Object();
        signalObject.categoryid = 4;  //register a demo commander on the server
        signalObject.commanderid = 0;
        signalObject.robotid = 0;
        signalObject.accesskey = _accessKey;
        _signal = JSON.stringify(signalObject);
        //alert(_signal);
        connection.invoke("XSignal", _signal);
    }

    function registerProcess(signalObject) {
        document.getElementById("CommanderId").value = signalObject.commanderid;

        //20170910 JPC config content in iframe from here in the parent.
        //ref: https://www.w3schools.com/jsref/prop_frame_contentdocument.asp
        //ref: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload
        _oeRobotIframe.contentDocument.getElementById("CommanderId").value
            = signalObject.commanderid;
        //note use of contentWindow to access JavaScript functions in an iframe
        _oeRobotIframe.contentWindow.register();

        //document.getElementById("robotIframe").contentWindow._allowLocation = false;

        _oerobotSignal.innerHTML =
            "You can test in a new window or on a different device e.g. smartphone by visiting this same website:<br />"
            + "<b>" + window.location.protocol + "//" + window.location.host + "/</b>"
            + "<br />then click on menu item 'Robot02' <br />"
            + "You will need to enter your 'CommanderId' value into the window or device.<br />"
            + "Your 'CommanderId' is <b>" + signalObject.commanderid + "</b>"
            + "<br /> <br />"
            + "<input type='button' value='Back to Simulation' onclick='noIframe(false);' /><br/><br />";

        window.onmousemove = function (e) {
            if (!_gamepadMode) {
                _wx = e.clientX;
                _wy = e.clientY;
                //data waits on standby then send on timer
            }
        }
    }

    //send to server
    function send() {
        var signalObject = new Object();
        signalObject.categoryid = 1; //commander sends to robot
        signalObject.commanderid = parseInt(document.getElementById("CommanderId").value);
        signalObject.robotid = signalObject.commanderid + 100;
        signalObject.accesskey = _accessKey;
        //2019-03-23 JPC can switch remote vision on and off
        signalObject.isvision = _isVision;

        //Monitor currently not used
        //document.getElementById("XData").innerHTML = JSON.stringify(oXData);
        if (_gamepadMode) {
            signalObject.xdata = gamepadData()
            if (signalObject.xdata.isvalid == 0) {
                changeInput();
                alert("GamePad is not responding or does not have an XBox-compatible output."
                    + " If you have just started this page and you have a GamePad plugged in, it can work to wait 5 seconds, move the left joystick, then try again.");
                return;
            }
        } else {
            signalObject.xdata = mouseData();
        }
        _signal = JSON.stringify(signalObject);
        connection.invoke("XSignal", _signal);
    }

    function mouseData() {
        //20180710 JPC plain circle controller change '#canvas' to '#mousePad'
        var leftMost = $("#mousePad").offset().left;
        var rightMost = $("#mousePad").offset().left + $("#mousePad").outerWidth();
        //20180710 JPC plain circle controller based on centre
        var centreX = $("#mousePad").offset().left - window.scrollX + 160;
        var centreY = $("#mousePad").offset().top - window.scrollY + 160;

        x = Math.round(((_wx - centreX) / 160) * 100);
        y = Math.round(((_wy - centreY) / 160) * 100) * -1;

        var oXData;
        //check that we are in the circle
        var speed = Math.sqrt(x * x + y * y);
        if (speed > 100) {
            oXData = new Object();
            oXData.vx1x1 = 0;
            oXData.vx2x1 = 0;
            oXData.vx1x2 = 0;
            oXData.vx2x2 = 0
        } else {
            oXData = twinMotorCalc(x, y);
        }
        return oXData;
    }

    // 20171011 SA
    function gamepadData() {
        var oXData;
        bFound = false;
        if (!_gamepadMode) {
            return;
        }
        var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);

        for (var i = 0; i < gamepads.length; i++) {
            var gp = gamepads[i];
            if (gp) {
                if (gp.id == "Xbox 360 Controller (XInput STANDARD GAMEPAD)") {
                    var x = gp.axes[0].toFixed(2) * 100;
                    var y = gp.axes[1].toFixed(2) * -100;
                    oXData = twinMotorCalc(x, y);
                    oXData.isvalid = 1;
                    bFound = true;
                    break;
                }
            }
        }
        if (!bFound) {
            //Not a valid gamepad
            oXData = new Object();
            oXData.isvalid = 0;
        }
        return oXData;
    }

    //Transform x and y input values to suitable values for driving a motor each side of the robot
    //Turn commands need interpretation as side motors running at different speeds
    function twinMotorCalc(x, y) {

        var leftDrive = y + x;
        if (leftDrive > 100) leftDrive = 100;
        var rightDrive = y - x;
        if (rightDrive > 100) rightDrive = 100;

        //20180711 JPC fix to forward/reverse switching of leftDrive and rightDrive
        if (leftDrive >= 0) {
            vx1x1 = leftDrive;
            vx2x1 = 0;
        } else {
            vx1x1 = 0;
            vx2x1 = -leftDrive;
        }

        if (rightDrive >= 0) {
            vx1x2 = rightDrive;
            vx2x2 = 0;
        } else {
            vx1x2 = 0;
            vx2x2 = -rightDrive;
        }
        var oXData = new Object();
        oXData.vx1x1 = vx1x1;
        oXData.vx1x2 = vx1x2;
        oXData.vx2x1 = vx2x1;
        oXData.vx2x2 = vx2x2;
        return oXData;
    }

    function noIframe(isChange) {
        //disable the test javascript robot (html page) from this user interface
        //and prompt for the use of a device
        if (isChange) {
            _oeRobotIframe.src = "#";
            _oeContainer.style.display = "none";
            _oeRobotRemote.style.display = "block";
            _oeRobotRemote.style.backgroundColor = "lightgrey";
            //2019-03-13 JPC remote vision
            _rvid.src = "../images/vidPlaceholder.jpg";
            //0.5 second delay until displaying remote vision
            //to prevent seeing a "leftover" image from the simulation
            window.setTimeout(startVision, 500);
        } else {
            window.location.replace(window.location.href);
        }
    }

    function startVision() {
        _isVision = true;
    }

    //toggle between mouse input and gamepad
    function changeInput() {
        _gamepadMode = !_gamepadMode;

        //20180710 JPC plain circle controller change '#circle' to '#mousePad'
        if (_gamepadMode) {
            $('#mousePad').hide();
            $('#gamepad-container').show();
            $("#btn-controller-change").html('Change to mouse');
            $('#uiLabel').innerHTML = "Human Commander - gamepad";
        } else {
            $('#mousePad').show();
            $('#gamepad-container').hide();
            $("#btn-controller-change").html('Change to gamepad');
            $('#uiLabel').innerHTML = "Human Commander - mouse pointer in circle";
        }
    }

</script>

<script>

    function initMap() {
        var styledMapType = new google.maps.StyledMapType(
            [
                {
                    "featureType": "landscape.natural",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {
                            "visibility": "on"
                        },
                        {
                            "color": "#e0efef"
                        }
                    ]
                },
                {
                    "featureType": "poi",
                    "elementType": "geometry.fill",
                    "stylers": [
                        {
                            "visibility": "on"
                        },
                        {
                            "hue": "#1900ff"
                        },
                        {
                            "color": "#c0e8e8"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "lightness": 100
                        },
                        {
                            "visibility": "simplified"
                        }
                    ]
                },
                {
                    "featureType": "road",
                    "elementType": "labels",
                    "stylers": [
                        {
                            "visibility": "off"
                        }
                    ]
                },
                {
                    "featureType": "transit.line",
                    "elementType": "geometry",
                    "stylers": [
                        {
                            "visibility": "on"
                        },
                        {
                            "lightness": 700
                        }
                    ]
                },
                {
                    "featureType": "water",
                    "elementType": "all",
                    "stylers": [
                        {
                            "color": "#7dcdcd"
                        }
                    ]
                }
            ],
            { name: 'Styled Map' });


        var myLatLng = { lat: -36.8485, lng: 174.7633 };

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 18,
            center: myLatLng
        });

        //Associate the styled map with the MapTypeId and set it to display.
        map.mapTypes.set('styled_map', styledMapType);
        map.setMapTypeId('styled_map');

        marker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            title: 'Hello World!'
        });
    }

    function getPosition(position) {
        x.innerHTML = "Latitude: " + position.coords.latitude +
            "<br>Longitude: " + position.coords.longitude;
    }


    function moveMarker(lat, long) {

        marker.setPosition(new google.maps.LatLng(lat, long));
        map.panTo(new google.maps.LatLng(lat, long));
    }
</script>




<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAUZ8vzVn2gPmQfihhhVsxSb3O5QPg2BJ4&callback=initMap">
</script>